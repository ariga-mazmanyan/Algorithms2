# -*- coding: utf-8 -*-
"""KahnsAlgorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hHk9ixgx6gD6CCXfvKwbdNewfPcuwPmZ
"""

def topological_sort(graph):

    indegrees = {}
    for node in graph:
        indegrees[node] = 0
    for node in graph:
        for neighbor in graph[node]:
            if neighbor in indegrees:
                indegrees[neighbor] += 1
            else:
                indegrees[neighbor] = 1

    queue = []
    for node in indegrees:
        if indegrees[node] == 0:
            queue.append(node)

    sorted_order = []

    while queue:
        node = queue.pop(0)
        sorted_order.append(node)
        for neighbor in graph[node]:
            indegrees[neighbor] -= 1
            if indegrees[neighbor] == 0:
                queue.append(neighbor)

    if len(sorted_order) != len(graph):
        raise ValueError("The graph is not a DAG (Directed Acyclic Graph).")

    return sorted_order

graph = {
    'A': ['B', 'C'],
    'B': ['D', 'F'],
    'C': ['F'],
    'D': ['E'],
    'E': ['C', 'F'],
    'F': []
}

print(topological_sort(graph))