# -*- coding: utf-8 -*-
"""BellmanFord.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JRkYaPdQLcLnjdgTuBnD4wkV13gOL0UR
"""

def bellman_ford(graph, start):

    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    for _ in range(len(graph) - 1):
        for node in graph:
            for neighbor, weight in graph[node].items():
                if distances[node] + weight < distances[neighbor]:
                    distances[neighbor] = distances[node] + weight

    for node in graph:
        for neighbor, weight in graph[node].items():
            if distances[node] + weight < distances[neighbor]:
                raise ValueError("Graph contains a negative cycle")

    return distances

graph = {
    'A': {'B': 3, 'C': 2},
    'B': {'A': -6, 'D': 6},
    'C': {'A': 2, 'D': 4, 'E': 1},
    'D': {'B': -6, 'C': 4, 'E': 5},
    'E': {'C': 1, 'D': 5}
}

start_node = 'A'
print(bellman_ford(graph, start_node))