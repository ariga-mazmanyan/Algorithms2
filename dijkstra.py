# -*- coding: utf-8 -*-
"""Dijkstra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bmR74R-6pM0he8vofl1MEtfdrZVj4pJX
"""

def dijkstra(graph, start):

    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    visited = set()

    while len(visited) < len(graph):

        min_node = None
        min_distance = float('inf')
        for node in graph:
            if node not in visited and distances[node] < min_distance:
                min_node = node
                min_distance = distances[node]

        visited.add(min_node)

        for neighbor, weight in graph[min_node].items():
            new_distance = distances[min_node] + weight
            if new_distance < distances[neighbor]:
                distances[neighbor] = new_distance

    return distances

graph = {
    'A': {'B': 3, 'C': 2},
    'B': {'A': 3, 'D': 6},
    'C': {'A': 2, 'D': 4, 'E': 1},
    'D': {'B': 6, 'C': 4, 'E': 5},
    'E': {'C': 1, 'D': 5}
}

start_node = 'A'
print(dijkstra(graph, start_node))